{"version":3,"names":[],"mappings":"","sources":["panel.js"],"sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\n/**\n * Created by mainul on 3/31/16.\n */\n\n/**\n * this function for format select2 data\n * @param state\n * @returns {*}\n */\nfunction formatState(state) {\n    if (!state.id) {\n        return state.text;\n    }\n    var $state = $('<span>' + state.text + '</span>');\n    return $state;\n}\n\nfunction filtersForSelect2Dependancy(filters) {\n    if (filters.length < 1) {\n        return filters;\n    }\n    var newFilter = [];\n    $.each(filters, function (k, v) {\n        var fl = [v[0]];\n\n        if (typeof v[1] === 'undefined') {\n            fl.push('=');\n        } else {\n            fl.push(v[1]);\n        }\n\n        fl.push((typeof v[2] === 'undefined' ? \"\" : \"%\") + $('[name=\"' + v[0] + '\"]').val() + (typeof v[3] === 'undefined' ? \"\" : \"%\"));\n\n        newFilter.push(fl);\n    });\n\n    return newFilter;\n}\n\n/**\n * this function for select2 with ajax data\n * @param selector\n * @param table\n * @param select\n * @param filters //set as array Ex:[['fieldname'],['fieldname','oparetion(=)','like_start','like_end']]\n * @param f_k\n * @param f_v\n */\nfunction getvalueForSelect2(selector, table, select, filters, f_k, f_v, defaultValue) {\n\n    var $selecttor = $(selector).select2({\n        ajax: {\n            url: \"/api/getvalue\",\n            dataType: 'json',\n            delay: 250,\n            data: function data(params) {\n                return {\n                    table: table,\n                    select: select,\n                    filters: filtersForSelect2Dependancy(filters),\n                    search_key: f_v,\n                    search: params.term,\n                    page: params.page\n                };\n            },\n            processResults: function processResults(data, params) {\n                // parse the results into the format expected by Select2\n                // since we are using custom formatting functions we do not need to\n                // alter the remote JSON data, except to indicate that infinite\n                // scrolling can be used\n                params.page = params.page || 1;\n                var newdata = [];\n                $.each(data, function (k, v) {\n                    newdata.push({ 'id': v[f_k], 'text': v[f_v] });\n                });\n                return {\n\n                    results: newdata,\n                    pagination: {\n                        more: params.page * 30 < data.total_count\n                    }\n                };\n            },\n            cache: true\n        },\n        /*initSelection:function (item,callback){\n            if (defaultValue) {\n                callback(defaultValue);\n            }\n        },*/\n        escapeMarkup: function escapeMarkup(markup) {\n            return markup;\n        }, // let our custom formatter work\n        minimumInputLength: 0,\n        templateResult: formatState, // omitted for brevity, see the source of this page\n        placeholder: 'Select an option'\n    });\n    //callback($selecttor)\n}\n\n//Get Value\n\nfunction getValue(url, callback) {\n    $.ajax({\n        url: url,\n        success: function success(data) {\n            callback(data);\n        },\n        complete: function complete(xhr) {\n            //console.log(xhr)\n        }\n    });\n}\n\n// Search Sting Start with Prototype\nif (!String.prototype.startsWith) {\n    String.prototype.startsWith = function (str) {\n        return !this.indexOf(str);\n    };\n}\n\nfunction leftPad(n, width, z) {\n    z = z || '0';\n    n = n + '';\n    return n.length >= width ? n : new Array(width - n.length + 1).join(z) + n;\n}\n\n},{}]},{},[1]);\n"],"file":"panel.js","sourceRoot":"/source/"}